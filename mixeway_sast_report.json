[{"name":"CVE-2019-10086","scannerType":"OPENSOURCE","description":"In Apache Commons Beanutils 1.9.2, a special BeanIntrospector class was added which allows suppressing the ability for an attacker to access the classloader via the class property available on all Java objects. We, however were not using this by default characteristic of the PropertyUtilsBean.","severity":"HIGH","packageName":"commons-beanutils","packageVersion":"1.7.0","references":"* [https://ossindex.sonatype.org/vulnerability/9dd388b6-e51b-4261-9a0d-76f9aeb4f153?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils.commons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/9dd388b6-e51b-4261-9a0d-76f9aeb4f153?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils.commons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0114","scannerType":"OPENSOURCE","description":"Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils through 1.9.2, does not suppress the class property, which allows remote attackers to \"manipulate\" the ClassLoader and execute arbitrary code via the class parameter, as demonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1.","severity":"HIGH","packageName":"commons-beanutils","packageVersion":"1.7.0","references":"* [https://ossindex.sonatype.org/vulnerability/cc1835c0-63c3-4b0a-baa5-a3891271bf60?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils.commons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/cc1835c0-63c3-4b0a-baa5-a3891271bf60?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils.commons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-15708","scannerType":"OPENSOURCE","description":"In Apache Synapse, by default no authentication is required for Java Remote Method Invocation (RMI). So Apache Synapse 3.0.1 or all previous releases (3.0.0, 2.1.0, 2.0.0, 1.2, 1.1.2, 1.1.1) allows remote code execution attacks that can be performed by injecting specially crafted serialized objects. And the presence of Apache Commons Collections 3.2.1 (commons-collections-3.2.1.jar) or previous versions in Synapse distribution makes this exploitable. To mitigate the issue, we need to limit RMI access to trusted users only. Further upgrading to 3.0.1 version will eliminate the risk of having said Commons Collection version. In Synapse 3.0.1, Commons Collection has been updated to 3.2.2 version.","severity":"CRITICAL","packageName":"commons-collections","packageVersion":"3.1","references":"* [https://ossindex.sonatype.org/vulnerability/9b28a5d2-9be7-4414-a59b-98e25e4c608a?component-type\u003dmaven\u0026component-name\u003dcommons-collections.commons-collections\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/9b28a5d2-9be7-4414-a59b-98e25e4c608a?component-type\u003dmaven\u0026component-name\u003dcommons-collections.commons-collections\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2015-6420","scannerType":"OPENSOURCE","description":"Serialized-object interfaces in certain Cisco Collaboration and Social Media; Endpoint Clients and Client Software; Network Application, Service, and Acceleration; Network and Content Security Devices; Network Management and Provisioning; Routing and Switching - Enterprise and Service Provider; Unified Computing; Voice and Unified Communications Devices; Video, Streaming, TelePresence, and Transcoding Devices; Wireless; and Cisco Hosted Services products allow remote attackers to execute arbitrary commands via a crafted serialized Java object, related to the Apache Commons Collections (ACC) library.","severity":"HIGH","packageName":"commons-collections","packageVersion":"3.1","references":"* [https://ossindex.sonatype.org/vulnerability/ac157388-2d0e-4c78-b3f4-033572d19286?component-type\u003dmaven\u0026component-name\u003dcommons-collections.commons-collections\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/ac157388-2d0e-4c78-b3f4-033572d19286?component-type\u003dmaven\u0026component-name\u003dcommons-collections.commons-collections\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-1000031","scannerType":"OPENSOURCE","description":"Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution","severity":"CRITICAL","packageName":"commons-fileupload","packageVersion":"1.3.2","references":"* [https://ossindex.sonatype.org/vulnerability/3d5968a4-4e14-4a98-8816-a4e847bc1426?component-type\u003dmaven\u0026component-name\u003dcommons-fileupload.commons-fileupload\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/3d5968a4-4e14-4a98-8816-a4e847bc1426?component-type\u003dmaven\u0026component-name\u003dcommons-fileupload.commons-fileupload\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-29425","scannerType":"OPENSOURCE","description":"In Apache Commons IO before 2.7, When invoking the method FileNameUtils.normalize with an improper input string, like \"//../foo\", or \"\\\\..\\foo\", the result would be the same value, thus possibly providing access to files in the parent directory, but not further above (thus \"limited\" path traversal), if the calling code would use the result to construct a path value.","severity":"MEDIUM","packageName":"commons-io","packageVersion":"2.2","references":"* [https://ossindex.sonatype.org/vulnerability/82848549-29bd-4594-b983-e61e4b2c6924?component-type\u003dmaven\u0026component-name\u003dcommons-io.commons-io\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/82848549-29bd-4594-b983-e61e4b2c6924?component-type\u003dmaven\u0026component-name\u003dcommons-io.commons-io\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2019-14900","scannerType":"OPENSOURCE","description":"A flaw was found in Hibernate ORM in versions before 5.3.18, 5.4.18 and 5.5.0.Beta1. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SELECT or GROUP BY parts of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks.","severity":"MEDIUM","packageName":"hibernate-core","packageVersion":"3.3.1.GA","references":"* [https://ossindex.sonatype.org/vulnerability/b90adad8-8651-46a9-a47c-34e93516e8dd?component-type\u003dmaven\u0026component-name\u003dorg.hibernate.hibernate-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/b90adad8-8651-46a9-a47c-34e93516e8dd?component-type\u003dmaven\u0026component-name\u003dorg.hibernate.hibernate-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-25638","scannerType":"OPENSOURCE","description":"A flaw was found in hibernate-core in versions prior to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.","severity":"HIGH","packageName":"hibernate-core","packageVersion":"3.3.1.GA","references":"* [https://ossindex.sonatype.org/vulnerability/f4d0dc05-b8e2-4034-a1a6-badcb9d57863?component-type\u003dmaven\u0026component-name\u003dorg.hibernate.hibernate-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/f4d0dc05-b8e2-4034-a1a6-badcb9d57863?component-type\u003dmaven\u0026component-name\u003dorg.hibernate.hibernate-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-9488","scannerType":"OPENSOURCE","description":"Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.","severity":"LOW","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/d3477f9c-032a-44a7-a5e1-02ae35e4737c?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/d3477f9c-032a-44a7-a5e1-02ae35e4737c?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-4104","scannerType":"OPENSOURCE","description":"JMSAppender in Log4j 1.2 is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration. The attacker can provide TopicBindingName and TopicConnectionFactoryBindingName configurations causing JMSAppender to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-44228. Note this issue only affects Log4j 1.2 when specifically configured to use JMSAppender, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nThe following information is provided by Sonatype Nexus Intelligence. Nexus Intelligence is the only security research service that performs \"secondary expansion\" to determine if newly discovered vulnerabilities are also present in other components.\n\nLearn more about Nexus Intelligence -- https://www.sonatype.com/products/intelligence\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\nExplanation\n---------------------------------------------------\n\nThe `log4j:log4j` package is vulnerable to Deserialization of Untrusted Data. The `lookup()` and `activateOptions()` methods in the `JMSAppender` class allow `JNDI` lookup requests to be made when the `TopicBindingName` and `TopicConnectionFactoryBindingName` specify a trusted host. Lookups made to this host may be used by attackers to request a serialized malicious Java Object that can be deserialized and executed, leading to Remote Code Execution (RCE). \n\nNote that this vulnerability is different from CVE-2021-44228 and requires the attacker to be in control of the third party host that is specified in the configuration, or write access to the Log4j configuration file in order to specify a malicious lookup host directly. This vulnerability also only affects the 1.x.x component of `Log4j` released under the `log4j:log4j` group and artifact IDs.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in all versions of log4j:log4j, not just in the 1.2.x branch as the advisory states. \n\n\nDetection\n---------------------------------------------------\n\nThe application is vulnerable by using this component under the following circumstances:\n\n- The configuration file specifies an allowed third-party `JNDI` lookup host for the `JMSAppender`\n- the `javax.jms.*` API is included in the application\u0027s `CLASSPATH`\n\nReference: https://bugzilla.redhat.com/show_bug.cgi?id\u003d2031667#c28\n\n\nRecommendation\n---------------------------------------------------\n\nThe 1.x.x component has reach `End of Life`, and users should upgrade to a non-vulnerable version of `org.apache.logging.log4j:log4j-core` as this component includes other security vulnerabilities that are not fixed.\n\nReferences:\n- https://github.com/apache/logging-log4j2/pull/608#issuecomment-990494126\n- https://logging.apache.org/log4j/1.2/\n","severity":"HIGH","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/4a7955ac-037c-42bc-a83e-b51efe2490af?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/4a7955ac-037c-42bc-a83e-b51efe2490af?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-23307","scannerType":"OPENSOURCE","description":"CVE-2020-9493 identified a deserialization issue that was present in Apache Chainsaw. Prior to Chainsaw V2.0 Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists.","severity":"HIGH","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/8923f062-a77b-48ca-80a2-d3af45919229?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/8923f062-a77b-48ca-80a2-d3af45919229?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-23302","scannerType":"OPENSOURCE","description":"JMSSink in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP service the attacker has access to. The attacker can provide a TopicConnectionFactoryBindingName configuration causing JMSSink to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-4104. Note this issue only affects Log4j 1.x when specifically configured to use JMSSink, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.","severity":"HIGH","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/c998ada9-b8ca-4da9-ab6c-e863d6ef80e5?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/c998ada9-b8ca-4da9-ab6c-e863d6ef80e5?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-23305","scannerType":"OPENSOURCE","description":"By design, the JDBCAppender in Log4j 1.2.x accepts an SQL statement as a configuration parameter where the values to be inserted are converters from PatternLayout. The message converter, %m, is likely to always be included. This allows attackers to manipulate the SQL by entering crafted strings into input fields or headers of an application that are logged allowing unintended SQL queries to be executed. Note this issue only affects Log4j 1.x when specifically configured to use the JDBCAppender, which is not the default. Beginning in version 2.0-beta8, the JDBCAppender was re-introduced with proper support for parameterized SQL queries and further customization over the columns written to in logs. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.","severity":"CRITICAL","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/fb558ee6-6701-41b7-bc85-b298e2e2c0e0?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/fb558ee6-6701-41b7-bc85-b298e2e2c0e0?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2019-17571","scannerType":"OPENSOURCE","description":"Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data. This affects Log4j versions up to 1.2 up to 1.2.17.","severity":"CRITICAL","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/e6e4ebea-da12-4bde-8f24-6272925ad093?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/e6e4ebea-da12-4bde-8f24-6272925ad093?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-9488","scannerType":"OPENSOURCE","description":"Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.","severity":"LOW","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/d3477f9c-032a-44a7-a5e1-02ae35e4737c?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/d3477f9c-032a-44a7-a5e1-02ae35e4737c?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-45046","scannerType":"OPENSOURCE","description":"It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in a denial of service (DOS) attack. Log4j 2.15.0 restricts JNDI LDAP lookups to localhost by default. Note that previous mitigations involving configuration such as to set the system property `log4j2.noFormatMsgLookup` to `true` do NOT mitigate this specific vulnerability. Log4j 2.16.0 fixes this issue by removing support for message lookup patterns and disabling JNDI functionality by default. This issue can be mitigated in prior releases (\u003c2.16.0) by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class).\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nThe following information is provided by Sonatype Nexus Intelligence. Nexus Intelligence is the only security research service that performs \"secondary expansion\" to determine if newly discovered vulnerabilities are also present in other components.\n\nLearn more about Nexus Intelligence -- https://www.sonatype.com/products/intelligence\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\nExplanation\n---------------------------------------------------\n\nThe `log4j-core` package is vulnerable to the Use of an Externally-Controlled Format String. The `format()` method in the `MessagePatternConverter` and `MessagePatternConverter$LookupMessagePatternConverter` classes allow `JNDI LDAP` lookups to be made to remote hosts by default while logging application events. If the data retrieved is used to control the input data utilized in `Thread Context Maps` or `Context Lookups`, an attacker with control over a logged value may craft a malicious JNDI lookup string that causes `log4j` to crash. This may result in undefined behavior in applications utilizing `log4j-core`, and can lead to a Denial of Service (DoS) condition.\n\nNote: This vulnerability is a follow-up to CVE-2021-44228 to address the DoS attack vector.\n\n\nDetection\n---------------------------------------------------\n\nThe application is vulnerable by using this component.\n\n\nRecommendation\n---------------------------------------------------\n\nWe recommend upgrading to a version of this component that is not vulnerable to this specific issue.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n\nMitigating controls from the project advisory:\n\n* Java 8 (or later) users should upgrade to release 2.16.0.\n* Users requiring Java 7 should upgrade to release 2.12.2 when it becomes available (work in progress, expected to be available soon).\n* Otherwise, remove the JndiLookup class from the classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class\n\nReference: https://logging.apache.org/log4j/2.x/security.html\n","severity":"LOW","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/edaf092e-e7f3-4c69-8f01-a5c6fc44890a?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/edaf092e-e7f3-4c69-8f01-a5c6fc44890a?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-45105","scannerType":"OPENSOURCE","description":"Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0 and 2.12.3.\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nThe following information is provided by Sonatype Nexus Intelligence. Nexus Intelligence is the only security research service that performs \"secondary expansion\" to determine if newly discovered vulnerabilities are also present in other components.\n\nLearn more about Nexus Intelligence -- https://www.sonatype.com/products/intelligence\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\nExplanation\n---------------------------------------------------\n\nThe `log4j-core` package is vulnerable to Denial of Service (DoS) due to Uncontrolled Recursion. The methods and classes listed below allow for recursive evaluation of lookups with user-supplied inputs. Remote attackers with control over `Thread Context Map` data can supply specially-crafted inputs containing a recursive lookup. This will result in the process terminating when the logging configuration uses a non-default `Pattern Layout` with a `Context Lookup`, leading to a DoS condition.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/apache/logging/log4j/core/lookup/StrSubstitutor.class\n* replace()\n* substitute()\n\norg/apache/logging/log4j/core/config/AbstractConfiguration.class\n* initialize()\n* doConfigure()\n\n*Note:* The Attack Complexity of this vulnerability is still being discussed with the maintainers. We have deemed it High at this time due to the specific configuration necessary for the vulnerability to be exploited. \n\n\nDetection\n---------------------------------------------------\n\nThe application is vulnerable by using this component when the logging configuration uses a non-default Pattern Layout with a Context Lookup (for example, `$${ctx:loginId}`)\n\nReference: https://logging.apache.org/log4j/2.x/security.html\n\n\nRecommendation\n---------------------------------------------------\n\nWe recommend upgrading to a version of this component that is not vulnerable to this specific issue.\n\nMitigating controls from the project advisory:\n```\nImplement one of the following mitigation techniques:\n\nJava 8 (or later) users should upgrade to release 2.17.0.\nAlternatively, this can be mitigated in configuration:\n\nIn PatternLayout in the logging configuration, replace Context Lookups like ${ctx:loginId} or $${ctx:loginId} with Thread Context Map patterns (%X, %mdc, or %MDC).\nOtherwise, in the configuration, remove references to Context Lookups like ${ctx:loginId} or $${ctx:loginId} where they originate from sources external to the application such as HTTP headers or user input.\n```\n\nReference: https://logging.apache.org/log4j/2.x/security.html\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n","severity":"HIGH","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/7cc258a5-d3ab-451f-bd27-415ae0e3b457?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/7cc258a5-d3ab-451f-bd27-415ae0e3b457?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-5645","scannerType":"OPENSOURCE","description":"In Apache Log4j 2.x before 2.8.2, when using the TCP socket server or UDP socket server to receive serialized log events from another application, a specially crafted binary payload can be sent that, when deserialized, can execute arbitrary code.","severity":"CRITICAL","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/5fe31860-7512-497e-ab88-394e228cebb5?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/5fe31860-7512-497e-ab88-394e228cebb5?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-44228","scannerType":"OPENSOURCE","description":"Apache Log4j2 \u003c\u003d2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. In previous releases (\u003e2.10) this behavior can be mitigated by setting system property \"log4j2.formatMsgNoLookups\" to \"true\" or by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class). Java 8u121 (see https://www.oracle.com/java/technologies/javase/8u121-relnotes.html) protects against remote code execution by defaulting \"com.sun.jndi.rmi.object.trustURLCodebase\" and \"com.sun.jndi.cosnaming.object.trustURLCodebase\" to \"false\".\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nThe following information is provided by Sonatype Nexus Intelligence. Nexus Intelligence is the only security research service that performs \"secondary expansion\" to determine if newly discovered vulnerabilities are also present in other components.\n\nLearn more about Nexus Intelligence -- https://www.sonatype.com/products/intelligence\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\nExplanation\n---------------------------------------------------\n\nThe `log4j-core` package is vulnerable to Deserialization of Untrusted data. The vulnerable methods allow the `JNDI` Java interface to be used to request resources from arbitrary URIs using the `LDAP` and `LDAPS` protocols. This leads to Java objects contained within the resource to be deserialized and processed. Applications that use the `log4j-core` library to log events and utilize application data in log messages may inadvertently allow user input to be included inside their log messages. Remote attackers can leverage this behavior to fetch a malicious resource under their control. This would lead to malicious Java code being deserialized and executed in the context of the vulnerable application and may lead to Remote Code Execution (RCE).\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in `org.apache.logging.log4j:log4j-core`, and is not in `org.apache.logging.log4j:log4j-api` as the GitHub advisory states. The research team has also discovered that the vulnerable code was introduced in version 2.0-beta9 up to 2.12.2, and 2.13.0 up to 2.15.0, and not all versions before 2.15.0 as the GitHub advisory states. The 1.x branch is not affected by this vulnerability.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/apache/logging/log4j/core/net/JndiManager.class\n* lookup()\n\norg/apache/logging/log4j/core/lookup/JndiLookup.class\n* lookup()\n\norg/apache/logging/log4j/core/appender/mom/JmsAppender$Builder.class\n* build()\n\n\nDetection\n---------------------------------------------------\n\nThe application is vulnerable by using this component and including formatted message substitutions in their application\u0027s logged messages where formatted message lookups are enabled. Note that this is the default behavior in all versions prior to 2.15.0.\n\nReference: https://github.com/advisories/GHSA-jfh8-c2jp-5v3q\n\n\nRecommendation\n---------------------------------------------------\n\nWe recommend upgrading to a version of this component that is not vulnerable to this specific issue.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n\n**Project Recommendations**\n\n* Java 8 (or later) users should upgrade to release 2.16.0.\n* Users requiring Java 7 should upgrade to release 2.12.2 when it becomes available (work in progress, expected to be available soon).\n* Otherwise, remove the JndiLookup class from the classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class\n\nReference: https://logging.apache.org/log4j/2.x/security.html\n","severity":"CRITICAL","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/f0ac54b6-9b81-45bb-99a4-e6cb54749f9d?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/f0ac54b6-9b81-45bb-99a4-e6cb54749f9d?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"9e818913-69a3-41c8-9bcc-6293b378c53a","scannerType":"OPENSOURCE","description":"The component \u0027Log4j\u0027 is vulnerable to CWE-502.The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.[For version 2.0-beta9., For version 2.0-rc1., For version 2.0-rc2., From version 2.0.0 up to and including 2.14.1.]","severity":"CRITICAL","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/9e818913-69a3-41c8-9bcc-6293b378c53a?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/9e818913-69a3-41c8-9bcc-6293b378c53a?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-3258","scannerType":"OPENSOURCE","description":"Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.12 and prior. Easily exploitable vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.8 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H).","severity":"HIGH","packageName":"mysql-connector-java","packageVersion":"5.1.42","references":"* [https://ossindex.sonatype.org/vulnerability/a96ad840-7272-4f0d-8256-d99385995e65?component-type\u003dmaven\u0026component-name\u003dmysql.mysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/a96ad840-7272-4f0d-8256-d99385995e65?component-type\u003dmaven\u0026component-name\u003dmysql.mysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"6795ec44-f810-47aa-a22e-5d817e52cbdc","scannerType":"OPENSOURCE","description":"The `spring-beans` package is vulnerable to Remote Code Execution (RCE). The constructor method in the `CachedIntrospectionResults` class allows the loading of arbitrary classes. A remote attacker can leverage this behaviour to modify the web server\u0027s logging properties via a ClassLoader allowing for the upload of a web shell, ultimately resulting in RCE. This vulnerability is also known as `springshell` or `spring4shell` which affects `spring-beans` and not `spring-core` as earlier reports suggested. *Note:* This issue is due to an insufficient fix for CVE-2010-1622.","severity":"CRITICAL","packageName":"spring-beans","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/6795ec44-f810-47aa-a22e-5d817e52cbdc?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-beans\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/6795ec44-f810-47aa-a22e-5d817e52cbdc?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-beans\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-1271","scannerType":"OPENSOURCE","description":"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to configure Spring MVC to serve static resources (e.g. CSS, JS, images). When static resources are served from a file system on Windows (as opposed to the classpath, or the ServletContext), a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/580d61c3-20df-4bb8-99c3-36c89e0d7550?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/580d61c3-20df-4bb8-99c3-36c89e0d7550?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-1272","scannerType":"OPENSOURCE","description":"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.","severity":"HIGH","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/aa7190e3-4c47-42d6-82f6-afaf1da5762e?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/aa7190e3-4c47-42d6-82f6-afaf1da5762e?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-9878","scannerType":"OPENSOURCE","description":"An issue was discovered in Pivotal Spring Framework before 3.2.18, 4.2.x before 4.2.9, and 4.3.x before 4.3.5. Paths provided to the ResourceServlet were not properly sanitized and as a result exposed to directory traversal attacks.","severity":"HIGH","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/912ee58f-8088-48a0-b121-7e70f8f2b045?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/912ee58f-8088-48a0-b121-7e70f8f2b045?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-5421","scannerType":"OPENSOURCE","description":"In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.","severity":"HIGH","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/39054b8e-6165-4274-ae94-1cfd9b61e5a8?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/39054b8e-6165-4274-ae94-1cfd9b61e5a8?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-1000027","scannerType":"OPENSOURCE","description":"Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor\u0027s position is that untrusted data is not an intended use case. The product\u0027s behavior will not be changed because some users rely on deserialization of trusted data.","severity":"CRITICAL","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/e91b2e42-eb89-481a-9f35-1a0957955e47?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/e91b2e42-eb89-481a-9f35-1a0957955e47?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-1270","scannerType":"OPENSOURCE","description":"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack.","severity":"CRITICAL","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/9a3de118-b038-49ed-9af7-533210c9d85f?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/9a3de118-b038-49ed-9af7-533210c9d85f?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-1904","scannerType":"OPENSOURCE","description":"Cross-site scripting (XSS) vulnerability in web/servlet/tags/form/FormTag.java in Spring MVC in Spring Framework 3.0.0 before 3.2.8 and 4.0.0 before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via the requested URI in a default action.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/098bb0f6-44d1-489e-888f-65477990b8b1?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/098bb0f6-44d1-489e-888f-65477990b8b1?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-3625","scannerType":"OPENSOURCE","description":"Directory traversal vulnerability in Pivotal Spring Framework 3.0.4 through 3.2.x before 3.2.12, 4.0.x before 4.0.8, and 4.1.x before 4.1.2 allows remote attackers to read arbitrary files via unspecified vectors, related to static resource handling.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/8e6ea23f-abd8-4067-b501-9cd59be757f4?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/8e6ea23f-abd8-4067-b501-9cd59be757f4?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-3578","scannerType":"OPENSOURCE","description":"Directory traversal vulnerability in Pivotal Spring Framework 3.x before 3.2.9 and 4.0 before 4.0.5 allows remote attackers to read arbitrary files via a crafted URL.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/2cc56b92-af05-4ccb-ab6c-096c427a89bd?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/2cc56b92-af05-4ccb-ab6c-096c427a89bd?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2011-2894","scannerType":"OPENSOURCE","description":"Spring Framework 3.0.0 through 3.0.5, Spring Security 3.0.0 through 3.0.5 and 2.0.0 through 2.0.6, and possibly other versions deserialize objects from untrusted sources, which allows remote attackers to bypass intended security restrictions and execute untrusted code by (1) serializing a java.lang.Proxy instance and using InvocationHandler, or (2) accessing internal AOP interfaces, as demonstrated using deserialization of a DefaultListableBeanFactory instance to execute arbitrary commands via the java.lang.Runtime class.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/71e187f4-ad35-45de-ba3c-a099341b71e3?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/71e187f4-ad35-45de-ba3c-a099341b71e3?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0054","scannerType":"OPENSOURCE","description":"The Jaxb2RootElementHttpMessageConverter in Spring MVC in Spring Framework before 3.2.8 and 4.0.0 before 4.0.2 does not disable external entity resolution, which allows remote attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-4152, CVE-2013-7315, and CVE-2013-6429.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/ac314293-4801-42c5-96d0-573c1be06de6?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/ac314293-4801-42c5-96d0-573c1be06de6?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-6429","scannerType":"OPENSOURCE","description":"The SourceHttpMessageConverter in Spring MVC in Spring Framework before 3.2.5 and 4.0.0.M1 through 4.0.0.RC1 does not disable external entity resolution, which allows remote attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue, and a different vulnerability than CVE-2013-4152 and CVE-2013-7315.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/eee25964-45b1-431e-88b6-b28bc8a604d6?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/eee25964-45b1-431e-88b6-b28bc8a604d6?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-7315","scannerType":"OPENSOURCE","description":"The Spring MVC in Spring Framework before 3.2.4 and 4.0.0.M1 through 4.0.0.M2 does not disable external entity resolution for the StAX XMLInputFactory, which allows context-dependent attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via crafted XML with JAXB, aka an XML External Entity (XXE) issue, and a different vulnerability than CVE-2013-4152.  NOTE: this issue was SPLIT from CVE-2013-4152 due to different affected versions.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/1d8da819-4123-49cf-90e8-6ac0f9f3900a?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/1d8da819-4123-49cf-90e8-6ac0f9f3900a?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-4152","scannerType":"OPENSOURCE","description":"The Spring OXM wrapper in Spring Framework before 3.2.4 and 4.0.0.M1, when using the JAXB marshaller, does not disable entity resolution, which allows context-dependent attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via an XML external entity declaration in conjunction with an entity reference in a (1) DOMSource, (2) StAXSource, (3) SAXSource, or (4) StreamSource, aka an XML External Entity (XXE) issue.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/5a887220-77c9-4ebd-83c3-2a442b00774f?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/5a887220-77c9-4ebd-83c3-2a442b00774f?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2011-2730","scannerType":"OPENSOURCE","description":"VMware SpringSource Spring Framework before 2.5.6.SEC03, 2.5.7.SR023, and 3.x before 3.0.6, when a container supports Expression Language (EL), evaluates EL expressions in tags twice, which allows remote attackers to obtain sensitive information via a (1) name attribute in a (a) spring:hasBindErrors tag; (2) path attribute in a (b) spring:bind or (c) spring:nestedpath tag; (3) arguments, (4) code, (5) text, (6) var, (7) scope, or (8) message attribute in a (d) spring:message or (e) spring:theme tag; or (9) var, (10) scope, or (11) value attribute in a (f) spring:transform tag, aka \"Expression Language Injection.\"","severity":"HIGH","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/665bf190-81d9-4070-9048-16018952d303?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/665bf190-81d9-4070-9048-16018952d303?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0225","scannerType":"OPENSOURCE","description":"When processing user provided XML documents, the Spring Framework 4.0.0 to 4.0.4, 3.0.0 to 3.2.8, and possibly earlier unsupported versions did not disable by default the resolution of URI references in a DTD declaration. This enabled an XXE attack.","severity":"HIGH","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/574d289f-b344-4510-a089-9473d2c6118c?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/574d289f-b344-4510-a089-9473d2c6118c?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0054","scannerType":"OPENSOURCE","description":"The Jaxb2RootElementHttpMessageConverter in Spring MVC in Spring Framework before 3.2.8 and 4.0.0 before 4.0.2 does not disable external entity resolution, which allows remote attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-4152, CVE-2013-7315, and CVE-2013-6429.","severity":"MEDIUM","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/ac314293-4801-42c5-96d0-573c1be06de6?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/ac314293-4801-42c5-96d0-573c1be06de6?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-4152","scannerType":"OPENSOURCE","description":"The Spring OXM wrapper in Spring Framework before 3.2.4 and 4.0.0.M1, when using the JAXB marshaller, does not disable entity resolution, which allows context-dependent attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via an XML external entity declaration in conjunction with an entity reference in a (1) DOMSource, (2) StAXSource, (3) SAXSource, or (4) StreamSource, aka an XML External Entity (XXE) issue.","severity":"MEDIUM","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/5a887220-77c9-4ebd-83c3-2a442b00774f?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/5a887220-77c9-4ebd-83c3-2a442b00774f?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2015-2992","scannerType":"OPENSOURCE","description":"Apache Struts before 2.3.20 has a cross-site scripting (XSS) vulnerability.","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/a3efaa36-6517-4ed4-b63a-6c7a1d8ce00f?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/a3efaa36-6517-4ed4-b63a-6c7a1d8ce00f?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-4003","scannerType":"OPENSOURCE","description":"Cross-site scripting (XSS) vulnerability in the URLDecoder function in JRE before 1.8, as used in Apache Struts 2.x before 2.3.28, when using a single byte page encoding, allows remote attackers to inject arbitrary web script or HTML via multi-byte characters in a url-encoded parameter.","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/0081c46d-8e5f-4553-9937-d25f3399d130?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/0081c46d-8e5f-4553-9937-d25f3399d130?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-0785","scannerType":"OPENSOURCE","description":"Apache Struts 2.x before 2.3.28 allows remote attackers to execute arbitrary code via a \"%{}\" sequence in a tag attribute, aka forced double OGNL evaluation.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/5684f0fd-6580-461f-a0f6-eda4176de9bb?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/5684f0fd-6580-461f-a0f6-eda4176de9bb?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2011-5057","scannerType":"OPENSOURCE","description":"Apache Struts 2.3.1.1 and earlier provides interfaces that do not properly restrict access to collections such as the session and request collections, which might allow remote attackers to modify run-time data values via a crafted parameter to an application that implements an affected interface, as demonstrated by the SessionAware, RequestAware, ApplicationAware, ServletRequestAware, ServletResponseAware, and ParameterAware interfaces.  NOTE: the vendor disputes the significance of this report because of an \"easy work-around in existing apps by configuring the interceptor.\"","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/53dc946d-e590-4bab-909b-80313525e408?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/53dc946d-e590-4bab-909b-80313525e408?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0094","scannerType":"OPENSOURCE","description":"The ParametersInterceptor in Apache Struts before 2.3.16.1 allows remote attackers to \"manipulate\" the ClassLoader via the class parameter, which is passed to the getClass method.","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/46502110-4592-408e-836b-331e9ee41e6b?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/46502110-4592-408e-836b-331e9ee41e6b?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2012-0393","scannerType":"OPENSOURCE","description":"The ParameterInterceptor component in Apache Struts before 2.3.1.1 does not prevent access to public constructors, which allows remote attackers to create or overwrite arbitrary files via a crafted parameter that triggers the creation of a Java object.","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/6240f443-fddd-477d-b620-86f8c74f773c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/6240f443-fddd-477d-b620-86f8c74f773c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2012-0394","scannerType":"OPENSOURCE","description":"** DISPUTED ** The DebuggingInterceptor component in Apache Struts before 2.3.1.1, when developer mode is used, allows remote attackers to execute arbitrary commands via unspecified vectors.  NOTE: the vendor characterizes this behavior as not \"a security vulnerability itself.\"","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/27f74926-9c22-4e6e-8677-073e708508d1?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/27f74926-9c22-4e6e-8677-073e708508d1?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0113","scannerType":"OPENSOURCE","description":"CookieInterceptor in Apache Struts before 2.3.16.2, when a wildcard cookiesName value is used, does not properly restrict access to the getClass method, which allows remote attackers to \"manipulate\" the ClassLoader and execute arbitrary code via a crafted request.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-0094.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/ff890408-a4b8-4e3f-a892-ee7e72b2c8e3?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/ff890408-a4b8-4e3f-a892-ee7e72b2c8e3?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-1966","scannerType":"OPENSOURCE","description":"Apache Struts 2 before 2.3.14.1 allows remote attackers to execute arbitrary OGNL code via a crafted request that is not properly handled when using the includeParams attribute in the (1) URL or (2) A tag.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/64959e54-560d-4c85-b1ba-bae91251f948?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/64959e54-560d-4c85-b1ba-bae91251f948?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-2115","scannerType":"OPENSOURCE","description":"Apache Struts 2 before 2.3.14.2 allows remote attackers to execute arbitrary OGNL code via a crafted request that is not properly handled when using the includeParams attribute in the (1) URL or (2) A tag. NOTE: this issue is due to an incomplete fix for CVE-2013-1966.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/a902e7ce-8d2b-4de9-a3a4-e717c9ebea3e?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/a902e7ce-8d2b-4de9-a3a4-e717c9ebea3e?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-2134","scannerType":"OPENSOURCE","description":"Apache Struts 2 before 2.3.14.3 allows remote attackers to execute arbitrary OGNL code via a request with a crafted action name that is not properly handled during wildcard matching, a different vulnerability than CVE-2013-2135.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/5caecd83-b961-48ca-b29e-f39b8f302d08?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/5caecd83-b961-48ca-b29e-f39b8f302d08?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-2135","scannerType":"OPENSOURCE","description":"Apache Struts 2 before 2.3.14.3 allows remote attackers to execute arbitrary OGNL code via a request with a crafted value that contains both \"${}\" and \"%{}\" sequences, which causes the OGNL code to be evaluated twice.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/35c24ffb-ba83-44a8-95a7-008281c53ec9?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/35c24ffb-ba83-44a8-95a7-008281c53ec9?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-1965","scannerType":"OPENSOURCE","description":"Apache Struts Showcase App 2.0.0 through 2.3.13, as used in Struts 2 before 2.3.14.1, allows remote attackers to execute arbitrary OGNL code via a crafted parameter name that is not properly handled when invoking a redirect.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/7aa02cd2-5370-4f43-b202-d30665527d05?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/7aa02cd2-5370-4f43-b202-d30665527d05?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2012-0392","scannerType":"OPENSOURCE","description":"The CookieInterceptor component in Apache Struts before 2.3.1.1 does not use the parameter-name whitelist, which allows remote attackers to execute arbitrary commands via a crafted HTTP Cookie header that triggers Java code execution through a static method.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/79adf5cc-c0b2-4733-af17-e6379798687d?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/79adf5cc-c0b2-4733-af17-e6379798687d?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2012-0391","scannerType":"OPENSOURCE","description":"The ExceptionDelegator component in Apache Struts before 2.2.3.1 interprets parameter values as OGNL expressions during certain exception handling for mismatched data types of properties, which allows remote attackers to execute arbitrary Java code via a crafted parameter.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/59d508b0-5439-48ce-b68c-884f84d4c6e7?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/59d508b0-5439-48ce-b68c-884f84d4c6e7?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2012-0838","scannerType":"OPENSOURCE","description":"Apache Struts 2 before 2.2.3.1 evaluates a string as an OGNL expression during the handling of a conversion error, which allows remote attackers to modify run-time data values, and consequently execute arbitrary code, via invalid input to a field.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/2acafe03-9968-4568-8574-31876a99612f?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/2acafe03-9968-4568-8574-31876a99612f?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2019-0233","scannerType":"OPENSOURCE","description":"An access permission override in Apache Struts 2.0.0 to 2.5.20 may cause a Denial of Service when performing a file upload.","severity":"HIGH","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/dd3969ee-27ac-49e6-898b-2463eacaa64b?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/dd3969ee-27ac-49e6-898b-2463eacaa64b?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-1327","scannerType":"OPENSOURCE","description":"The Apache Struts REST Plugin is using XStream library which is vulnerable and allow perform a DoS attack when using a malicious request with specially crafted XML payload. Upgrade to the Apache Struts version 2.5.16 and switch to an optional Jackson XML handler as described here http://struts.apache.org/plugins/rest/#custom-contenttypehandlers. Another option is to implement a custom XML handler based on the Jackson XML handler from the Apache Struts 2.5.16.","severity":"HIGH","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/9b82d7bc-5262-43b8-bd0d-50ede8e76e56?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/9b82d7bc-5262-43b8-bd0d-50ede8e76e56?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-9787","scannerType":"OPENSOURCE","description":"When using a Spring AOP functionality to secure Struts actions it is possible to perform a DoS attack. Solution is to upgrade to Apache Struts version 2.5.12 or 2.3.33.","severity":"HIGH","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/e2ebe514-dc44-474a-82ab-d20bd81bfc4c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/e2ebe514-dc44-474a-82ab-d20bd81bfc4c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-9805","scannerType":"OPENSOURCE","description":"The REST Plugin in Apache Struts 2.1.2 through 2.3.x before 2.3.34 and 2.5.x before 2.5.13 uses an XStreamHandler with an instance of XStream for deserialization without any type filtering, which can lead to Remote Code Execution when deserializing XML payloads.","severity":"HIGH","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/3c254119-620e-4d3a-b456-f150d179e2c1?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/3c254119-620e-4d3a-b456-f150d179e2c1?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2019-0230","scannerType":"OPENSOURCE","description":"Apache Struts 2.0.0 to 2.5.20 forced double OGNL evaluation, when evaluated on raw user input in tag attributes, may lead to remote code execution.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/56c17f52-5f6c-420b-b025-eac87f89b686?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/56c17f52-5f6c-420b-b025-eac87f89b686?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-11776","scannerType":"OPENSOURCE","description":"Apache Struts versions 2.3 to 2.3.34 and 2.5 to 2.5.16 suffer from possible Remote Code Execution when alwaysSelectFullNamespace is true (either by user or a plugin like Convention Plugin) and then: results are used with no namespace and in same time, its upper package have no or wildcard namespace and similar to results, same possibility when using url tag which doesn\u0027t have value and action set and in same time, its upper package have no or wildcard namespace.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/aea7ad84-58a9-4883-a9ef-f69fae4dcd9c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/aea7ad84-58a9-4883-a9ef-f69fae4dcd9c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-17530","scannerType":"OPENSOURCE","description":"Forced OGNL evaluation, when evaluated on raw user input in tag attributes, may lead to remote code execution. Affected software : Apache Struts 2.0.0 - Struts 2.5.25.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/b01cc492-a961-4a7d-9faa-0b3a40b435a4?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/b01cc492-a961-4a7d-9faa-0b3a40b435a4?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-6795","scannerType":"OPENSOURCE","description":"In the Convention plugin in Apache Struts 2.3.20 through 2.3.30, it is possible to prepare a special URL which will be used for path traversal and execution of arbitrary code on server side.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/6f72c191-e0e1-4be0-a72a-6a12e4bec948?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/6f72c191-e0e1-4be0-a72a-6a12e4bec948?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-9791","scannerType":"OPENSOURCE","description":"The Struts 1 plugin in Apache Struts 2.3.x might allow remote code execution via a malicious field value passed in a raw message to the ActionMessage.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/f2eb9ab7-09aa-4599-a351-7ebbd11ff11b?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/f2eb9ab7-09aa-4599-a351-7ebbd11ff11b?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-5638","scannerType":"OPENSOURCE","description":"The Jakarta Multipart parser in Apache Struts 2 2.3.x before 2.3.32 and 2.5.x before 2.5.10.1 has incorrect exception handling and error-message generation during file-upload attempts, which allows remote attackers to execute arbitrary commands via a crafted Content-Type, Content-Disposition, or Content-Length HTTP header, as exploited in the wild in March 2017 with a Content-Type header containing a #cmd\u003d string.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/6fb3b58b-cf18-450e-ba0d-74432bc5ecff?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/6fb3b58b-cf18-450e-ba0d-74432bc5ecff?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"4","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"6","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"7","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"5","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Potentially sensitive data in a cookie","scannerType":"SAST","description":"\n            \n\u003cp\u003eThe information stored in a custom cookie should not be sensitive or related to the session. In most cases, sensitive data should only be stored in session\nand referenced by the user\u0027s session cookie. See HttpSession (\u003ccode\u003eHttpServletRequest.getSession()\u003c/code\u003e)\u003c/p\u003e\n\u003cp\u003eCustom cookies can be used for information that needs to live longer than and is independent of a specific session.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReference\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/315.html\"\u003eCWE-315: Cleartext Storage of Sensitive Information in a Cookie\u003c/a\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ApiAction.java","line":"40","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Home.java","line":"8","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Login.java","line":"7","severity":"Low","category":"SECURITY"},{"name":"Potential Command Injection","scannerType":"SAST","description":"\n            \n\u003cp\u003eThe highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eimport java.lang.Runtime;\n\nRuntime r \u003d Runtime.getRuntime();\nr.exec(\"/bin/sh -c some_tool\" + input);\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Command_Injection\"\u003eOWASP: Command Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE-78: Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)\u003c/a\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/PingAction.java","line":"45","severity":"Medium","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/PingAction.java","line":"9","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ProductAction.java","line":"11","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/RedirectAction.java","line":"5","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Register.java","line":"7","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ResetPassword.java","line":"6","severity":"Low","category":"SECURITY"},{"name":"May expose internal representation by returning reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e Returning a reference to a mutable object value stored in one of the object\u0027s fields\n  exposes the internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"77","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by returning reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e Returning a reference to a mutable object value stored in one of the object\u0027s fields\n  exposes the internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"85","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by incorporating reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e This code stores a reference to an externally mutable object into the\n  internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"81","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by incorporating reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e This code stores a reference to an externally mutable object into the\n  internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"89","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/ProductService.java","line":"28","severity":"Low","category":"SECURITY"},{"name":"Potential SQL/JPQL Injection (JPA)","scannerType":"SAST","description":"\n            \n\u003cp\u003e\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nEntityManager pm \u003d getEM();\n\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    String.format(\"select * from Users where name \u003d %s\", username),\n    UserEntity.class);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    \"select * from Users where name \u003d usernameParam\",UserEntity.class)\n    .setParameter(\"usernameParam\", username);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReferences (JPA)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html\"\u003eThe Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language\u003c/a\u003e\u003cbr/\u003e\n\u003cb\u003eReferences (SQL injection)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\"\u003eWASC-19: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://capec.mitre.org/data/definitions/66.html\"\u003eCAPEC-66: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE-89: Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\"\u003eOWASP: SQL Injection Prevention Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\"\u003eOWASP: Query Parameterization Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/services/ProductService.java","line":"48","severity":"Medium","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"93","severity":"Low","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"104","severity":"Low","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"29","severity":"Low","category":"SECURITY"},{"name":"Potential SQL/JPQL Injection (JPA)","scannerType":"SAST","description":"\n            \n\u003cp\u003e\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nEntityManager pm \u003d getEM();\n\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    String.format(\"select * from Users where name \u003d %s\", username),\n    UserEntity.class);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    \"select * from Users where name \u003d usernameParam\",UserEntity.class)\n    .setParameter(\"usernameParam\", username);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReferences (JPA)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html\"\u003eThe Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language\u003c/a\u003e\u003cbr/\u003e\n\u003cb\u003eReferences (SQL injection)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\"\u003eWASC-19: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://capec.mitre.org/data/definitions/66.html\"\u003eCAPEC-66: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE-89: Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\"\u003eOWASP: SQL Injection Prevention Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\"\u003eOWASP: Query Parameterization Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"75","severity":"Medium","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/example/HelloWorld.java","line":"27","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/example/Login.java","line":"24","severity":"Low","category":"SECURITY"}]